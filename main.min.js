'use strict';const canvas=document.getElementById("screen");const ctx=canvas.getContext('2d');var temp_level=`
##############################
#............................#
#............................#
#.....p.....e................#
#............................#
#.....#.....i................#
#............................#
##############################
`;var level_1=`
#############
#..s........#
#...........#
#.......i...#
#.p.........#
#.......e...#
#...........#
#...........#
#############
`
var level_2=`
#############
#...####....#
#.#.####e.i.#
#.#....#....#
#.####.#.####
#....#.#....#
####.#.####.#
#p..s#......#
#############
`
var level_3=`
#############
#e..........#
#..........i#
######..##.##
#e......#...#
#ie..#..#i.e#
######..#####
#p.........s#
#############
`
var levels=[level_1,level_2,level_3];var paths=["","",""];var secondTry=!1;var currentLevelIndex=0;const gridSize=32;var takeInput=!1;var target="e";var goal=0;var hasRun=0;var animationCounter=0;var transition=!1;var this_level=levels[currentLevelIndex].split("\n");setupGoal(target);takeInput=!0;hasRun++;var playerSprite=new Image();playerSprite.src="sprite_0.png";var enemySprite=new Image();enemySprite.src="sprites/target0.png";var innocentSprite=new Image();innocentSprite.src="sprites/target2.png";var deadEnemySprite=new Image();deadEnemySprite.src="sprites/target1.png";var deadInnocentSprite=new Image();deadInnocentSprite.src="sprites/target3.png";var shadowPlayerSprite=new Image();shadowPlayerSprite.src="sprite_3.png";const moveUp=119;const moveDown=115;const moveRight=100;const moveLeft=97;let enemy={width:gridSize,height:gridSize,color:"red"};let hazard={width:gridSize,height:gridSize,color:"orange"};let innocent={width:gridSize,height:gridSize,color:"blue"};let wall={width:gridSize,height:gridSize,color:"black"};let player={width:gridSize,height:gridSize,x:0,y:0,key:'p',color:"green"};let shadowPlayer={width:gridSize,height:gridSize,x:0,y:0,key:'p',color:"yellow"};function gotoNextLevel(){if(currentLevelIndex<levels.length-1){currentLevelIndex++;this_level=levels[currentLevelIndex].split("\n");setupGoal(target)}else if(secondTry==!1){secondTry=!0;player.key='s'
currentLevelIndex=0;this_level=levels[currentLevelIndex].split("\n");setupGoal(target)}}
function setupGoal(target){let y;let x;for(y=0;y<this_level.length;y++){for(x=0;x<this_level[1].length;x++){if(this_level[y][x]==target){goal++}}}}
function levelTransition(timeout){ctx.fillStyle="black";let levelHeight=(this_level.length-2)*gridSize;if(animationCounter<levelHeight){animationCounter++;setTimeout(levelTransition,timeout/2)}else{gotoNextLevel();levelTransitionEnd(100)}}
function levelTransitionEnd(timeout){if(animationCounter>0){animationCounter--;setTimeout(levelTransitionEnd,timeout/2)}else{takeInput=!0;transition=!1}}
function drawLevel(level_array){ctx.clearRect(0,0,canvas.width,canvas.height);ctx.lineWidth=1;let y,x;for(y=0;y<level_array.length;y++){for(x=0;x<level_array[y].length;x++){switch(level_array[y][x]){case '#':ctx.fillStyle=wall.color;ctx.fillRect(gridSize*x,gridSize*y,wall.width,wall.height);break;case 'p':if(secondTry==!1){player.x=x;player.y=y;ctx.drawImage(playerSprite,player.x*gridSize,player.y*gridSize,player.width,player.height)}else{shadowPlayer.x=x;shadowPlayer.y=y;ctx.drawImage(shadowPlayerSprite,shadowPlayer.x*gridSize,shadowPlayer.y*gridSize,shadowPlayer.width,shadowPlayer.height)}
break;case 's':if(secondTry==!0){player.x=x;player.y=y;ctx.drawImage(playerSprite,player.x*gridSize,player.y*gridSize,player.width,player.height)}
break;case 'e':ctx.fillStyle=enemy.color;ctx.drawImage(enemySprite,x*gridSize,y*gridSize,enemy.width,enemy.height);break;case "E":ctx.drawImage(deadEnemySprite,x*gridSize,y*gridSize,gridSize,gridSize);break;case "I":ctx.drawImage(deadInnocentSprite,x*gridSize,y*gridSize,gridSize,gridSize);break;case 'i':ctx.fillStyle=innocent.color;ctx.drawImage(innocentSprite,x*gridSize,y*gridSize,innocent.width,innocent.height);break;default:break}}}
if(transition==!0){ctx.fillStyle="black";let levelWidth=this_level[1].length*gridSize;ctx.fillRect(0,32,levelWidth,animationCounter)}}
function checkCollision(x,y){switch(this_level[y][x]){case '#':return!1;case target:this_level[y]=splice(this_level[y],x,1,target.toUpperCase());goal--;if(goal<=0){transition=!0;takeInput=!1;animationCounter=0;levelTransition(100)}
return!1;default:return!0}};function updatePlayerArray(dx,dy,object){let replace=this_level[object.y+dy][object.x+dx];this_level[object.y+dy]=splice(this_level[object.y+dy],object.x+dx,1,object.key);this_level[object.y]=splice(this_level[object.y],object.x,1,replace);object.y+=dy;object.x+=dx}
var inputDelay=50;var stopInput=!1;function resumeInput(){stopInput=!1}
document.addEventListener("keypress",function(event){if((takeInput)&&(!stopInput)){switch(event.keyCode){case moveUp:if(checkCollision(player.x,player.y-1)){updatePlayerArray(0,-1,player);if(secondTry==!1)paths[currentLevelIndex]=paths[currentLevelIndex]+"n"}
stopInput=!0;setTimeout(resumeInput,inputDelay);break;case moveDown:if(checkCollision(player.x,player.y+1)){updatePlayerArray(0,1,player);if(secondTry==!1)paths[currentLevelIndex]=paths[currentLevelIndex]+"s"}
stopInput=!0;setTimeout(resumeInput,inputDelay);break;case moveLeft:if(checkCollision(player.x-1,player.y)){updatePlayerArray(-1,0,player);if(secondTry==!1)paths[currentLevelIndex]=paths[currentLevelIndex]+"w"}
stopInput=!0;setTimeout(resumeInput,inputDelay);break;case moveRight:if(checkCollision(player.x+1,player.y)){updatePlayerArray(1,0,player);if(secondTry==!1)paths[currentLevelIndex]=paths[currentLevelIndex]+"e"}
stopInput=!0;setTimeout(resumeInput,inputDelay);break;case 110:gotoNextLevel();break}}});function*moveShadowPlayer(){let i=0;for(i;i<paths[currentLevelIndex].length;i++){switch(paths[currentLevelIndex][i]){case 'n':if(checkCollision(shadowPlayer.x,shadowPlayer.y-1))updatePlayerArray(0,-1,shadowPlayer);break;case 's':if(checkCollision(shadowPlayer.x,shadowPlayer.y+1))updatePlayerArray(0,1,shadowPlayer);break;case 'e':if(checkCollision(shadowPlayer.x+1,shadowPlayer.y))updatePlayerArray(1,0,shadowPlayer);break;case 'w':if(checkCollision(shadowPlayer.x-1,shadowPlayer.y))updatePlayerArray(-1,0,shadowPlayer);break}
yield i}}
function mainLoop(){if(secondTry==!0){moveShadowPlayer()}
drawLevel(this_level)}
setInterval(mainLoop,25)